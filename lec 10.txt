/*
 the program reads from file character by character till EOF and dispays it on stdout
 */

#include <stdio.h>
#include <stdlib.h>

int main(int argc, char *argv[]) 
{
//	if(argc!=2)
//	{
//		printf("Invalid number of arguments. Please enter file name to display its contents...\n")
//		exit(1);
//	}
//	File * fp=fopen(argv[1],"r"); // open file in read mode

	struct File * fp= fopen("main.c","r");
	if(fp==NULL)   // checking if the file has opened or not
	{
		perror("fopen failed");
		exit(1);
	}
	int c;
	
	while( (c=fgetc(fp)) != EOF  ) // reading from file char by char till EOF
	{
		fputc(c,stdout); // print char on stdout, we could use putc(c)
	}

	fclose(fp);// close file
	return 0;
}


********************************************************************************************************************************************
********************************************************************************************************************************************
#include <stdio.h>
#include <stdlib.h>

 /*
 the program reads from file line by line till EOF and dispays it on stdout
 */
int main(int argc, char *argv[]) 
{
//	if(argc!=2)
//	{
//		printf("Invalid number of arguments. Please enter file name to display its contents...\n")
//		exit(1);
//	}
//	File * fp=fopen(argv[1],"r");

	struct File * fp= fopen("main.c","r");
	if(fp==NULL) // checking if the file has opened or not
	{
		perror("fopen failed");
		exit(1);
	}
	int c;
	char buf[512];
	while( fgets(buf, 512 , fp ) != NULL ) // fgets return null if it reaches at EOF char or if there is any error
	{
		fputs(buf,stdout); // print char on stdout, we could use puts(buf)
	}
	fclose(fp);// close file
	return 0;
}



********************************************************************************************************************************************
********************************************************************************************************************************************

 /*
 the program takes input  from  the user and writes it to file char by char
 */

#include <stdio.h>
#include <stdlib.h>

int main(int argc, char *argv[]) 
{
//	if(argc!=2)
//	{
//		printf("Invalid number of arguments. Please enter file name to display its contents...\n")
//		exit(1);
//	}
//	File * fp=fopen(argv[1],"r");

	struct File * fp= fopen("hello.txt","a"); // open file in append mode 
	if(fp==NULL) // checking if the file has opened or not
	{
		perror("fopen failed");
		exit(1);
	}
	
	// taking input from the user
	char input[50];
	printf("Enter your Name: ");
	fgets(input,50,stdin);
	int len = strlen(input);
	input[len-1]='\0';
	
	 // writing char by char till index 0 to '\0' char
	int i=0;  
	while(input[i]!='\0')
	{
		fputc(input[i],fp);
		i++;
	}
	fputc('\n',fp); // placing new line char at the end

	 printf("\n\nBye Bye ...");
	fclose(fp);   // close file
	return 0;
}


 


********************************************************************************************************************************************
********************************************************************************************************************************************
 /*
 the program takes input  from  the user and writes it to file line by line
 */


#include <stdio.h>
#include <stdlib.h>

int main(int argc, char *argv[]) 
{
//	if(argc!=2)
//	{
//		printf("Invalid number of arguments. Please enter file name to display its contents...\n")
//		exit(1);
//	}
//	File * fp=fopen(argv[1],"r");

	struct File * fp= fopen("hello.txt","a");
	if(fp==NULL) // checking if the file has opened or not
	{
		perror("fopen failed");
		exit(1);
	}
	
	// taking input from the user
	char input[50];
	printf("Enter Input String: ");
	scanf("%[^\n]s",input);  //  taking string from user using scanf()  will automatically place \0 at the end 
	
	 // writing the complete input string
	fputs(input,fp);
	fputc('\n',fp); // placing new line char at the end

	printf("\n\nBye Bye ...");
	fclose(fp);   // close file
	return 0;
}


********************************************************************************************************************************************
********************************************************************************************************************************************
 /*
      the program reads froma file using formatted functions
      (using formatted functions we do not need to convert their data type 
	  rather we specify in which type we want to convert it)
 */

#include <stdio.h>
#include <stdlib.h>


int main(int argc, char *argv[]) 
{
//	if(argc!=2)
//	{
//		printf("Invalid number of arguments. Please enter file name to display its contents...\n")
//		exit(1);
//	}
//	File * fp=fopen(argv[1],"r");

	struct File * fp= fopen("hello.txt","r");
	if(fp==NULL) // checking if the file has opened or not
	{
		perror("fopen failed");
		exit(1);
	}
	
	int n;
	
	fscanf(fp,"%d,",&n);   /*Here integer will be read read from fp and stored in n*/
	
	while(feof(fp)== 0)
	{
		fprintf(stdout,"%d ",n);
		fscanf(fp,"%d,",&n);

		/* comma after %d indicates indicates that read till a comma too. 
		   Integers, by default, are read until a space, tab or newline character occurs, 
		   here comma is specified because the numbers may be comma separated  */
	}
	
	

	printf("\n\nBye Bye ...");
	fclose(fp);   // close file
	return 0;
}

********************************************************************************************************************************************
********************************************************************************************************************************************
/* The program takes a studentâ€™s data from user, stores it in a Student 
   structure and saves the result in a binary file   */

#include <stdio.h>
#include <stdlib.h>

struct Student 
{
	int id;
	char name[20];
	char address[30];
};
int main(int argc, char *argv[]) 
{

//	if(argc!=2)
//	{
//		printf("Invalid number of arguments. Please enter file name to display its contents...\n")
//		exit(1);
//	}
//	File * fp=fopen(argv[1],"r");

        struct Student s1;
	struct File * fp= fopen("student.txt","ab");  
	if(fp==NULL) // checking if the file has opened or not
	{
		perror("fopen failed");
		exit(1);
	}
		
	printf ("Roll Number: ");
	scanf ("%d",&s1.id);
	getchar ();
	
	printf ("Name: ");
	scanf ("%[^\n]s",s1.name);
	getchar ();
		
    	printf ("Address: ");
	scanf ("%[^\n]s",s1.address);
	getchar ();

	fwrite(    (struct Student*)&s1 , sizeof(s1),1,fp);

	printf("\n\nBye Bye ...");
	fclose(fp);   // close file
	return 0;
}


********************************************************************************************************************************************
********************************************************************************************************************************************

/* The program  reads from a binary file using fread() and display data on screen   */

#include <stdio.h>
#include <stdlib.h>

struct Student 
{
	int id;
	char name[20];
	char address[30];
};
int main(int argc, char *argv[]) 
{
//	if(argc!=2)
//	{
//		printf("Invalid number of arguments. Please enter file name to display its contents...\n")
//		exit(1);
//	}
//	File * fp=fopen(argv[1],"r");

    	struct Student s1;

	struct File * fp= fopen("student.txt","rb");  
	if(fp==NULL) // checking if the file has opened or not
	{
		perror("fopen failed");
		exit(1);
	}
		
	 
        fread( (struct Student*)&s1 , sizeof(s1),1,fp); // fread() used to store one record from fp to s1

   	while(!feof(fp))
  	{

    	    printf ("id: %d\n",s1.id);
    	    printf("Name :%s\n",s1.name);
    	    printf("Adress :%s\n",s1.address);
    	
	    fread( (struct Student*)&s1 , sizeof(s1),1,fp);
	}

	printf("\n\nBye Bye ...");
	fclose(fp);   // close file
	return 0;
}


********************************************************************************************************************************************
********************************************************************************************************************************************
#include <stdio.h>
#include <stdlib.h>
/* Practice random access of binary file   */
struct Student 
{
	int id;
	char name[20];
	char address[30];
};
int main(int argc, char *argv[]) 
{
//	if(argc!=2)
//	{
//		printf("Invalid number of arguments. Please enter file name to display its contents...\n")
//		exit(1);
//	}
//	File * fp=fopen(argv[1],"r");

    struct Student s1;
	struct File * fp= fopen("student.txt","rb");  
	if(fp==NULL) // checking if the file has opened or not
	{
		perror("fopen failed");
		exit(1);
	}
		
	fread( (struct Student*)&s1 , sizeof(s1),1,fp); // fread() used to store one record from fp to s1
   // fseek(fp,112,SEEK_SET);
   // printf("sizeof%d\n",sizeof(s1)*2);
    while(!feof(fp))
    {
    	printf ("id: %d\n",s1.id);
    	printf("Name :%s\n",s1.name);
    	printf("Adress :%s\n",s1.address);
    	
    	fseek(fp,sizeof(s1),SEEK_CUR);
    	
    	
    	
//    	printf("loc:%d\n",ftell(fp));
	    fread( (struct Student*)&s1 , sizeof(s1),1,fp);
	}
	printf("\n\nBye Bye ...");
	fclose(fp);   // close file
	return 0;
}


********************************************************************************************************************************************
********************************************************************************************************************************************


#include <stdio.h>
#include <stdlib.h>
/* The program to change 2nd record stored in  student.txt file  */

struct Student 
{
	int id;
	char name[20];
	char address[30];
};
int main(int argc, char *argv[]) 
{ 

    struct Student s1;
	struct File * fp= fopen("student.txt","r+b");  
	if(fp==NULL) // checking if the file has opened or not
	{
		perror("fopen failed");
		exit(1);
	}
	
	fseek(fp,sizeof(s1),SEEK_SET); // or  fseek(fp,56,SEEK_SET); 
    //  go to 2nd record
    
//	printf("sizeof%d\n",sizeof(s1));

	fread( (struct Student*)&s1 , sizeof(s1),1,fp);   //  read 2nd record
	
	//now current file offset is at 3rd record 
	//  so change it again to 2nd record to replace it
	
	fseek(fp,sizeof(s1),SEEK_SET); //  go to 2nd record
	
     s1.id=4;   // change data
     strcpy( s1.name, "Hammad");
     strcpy( s1.address, "GCU");
     
    fwrite( (struct Student*)&s1 , sizeof(s1),1,fp);  //  replace 2nd record
   
    rewind(fp);   //   go to beginning of file and display all file records
    printf("\nreading\n");
    fread( (struct Student*)&s1 , sizeof(s1),1,fp);
    while(!feof(fp))
    {
    	printf ("id: %d\n",s1.id);
    	printf("Name :%s\n",s1.name);
    	printf("Adress :%s\n",s1.address);
    	
     	
//    	printf("loc:%d\n",ftell(fp));
	    fread( (struct Student*)&s1 , sizeof(s1),1,fp);
	}
	printf("\n\nBye Bye ...");
	fclose(fp);   // close file
	return 0;
}


********************************************************************************************************************************************
********************************************************************************************************************************************


