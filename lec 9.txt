
************************************************************
************************************************************

/* Simple program showing allocation, using and deallocation of memory on heap */

#include<stdio.h>
#include<stdlib.h>
   
int main()
{
	int size;
	printf("Enter size of the array: ");
	scanf("%d",&size );
	int * arr = ( int *) malloc( sizeof(int) * size );
	if( arr ==  NULL)
	    perror ("malloc failed \n");
     
        printf("Initial values in the array are: ");
        int i=0;
        for(i;i<size;i++)
        { 
     		printf("%d \t",arr[i]);
	}
     
     
        printf (" \nEnter %d elements of the array: \n",size );
        i=0;
	for( i  ; i<size ; i++)
	{
		scanf ("%d", &arr[i] );
	} 
	    
	printf ("The elements of the array are: \n");
	i=0;
	for( i=0;i< size;i++)
	{
		printf ("%d \t", arr[i]);
	}
     
	
	printf ("\n");
	free( arr ); 
	/*deallocating the previously allocated memory*/ 
   
 	return 0;
}
 
************************************************************
************************************************************
/* In this program the size of the array is changed using realloc() */


#include<stdio.h>
#include<stdlib.h>
 
   
int main()
{
	int size;
	printf("Enter size of the array: ");
	scanf("%d",&size );
	int * arr = ( int *) malloc( sizeof(int) * size );
	if( arr ==  NULL)
		perror ("malloc failed \n");
     
	printf("Initial values in the array are: ");
	int i=0;
	for(i;i<size;i++)
	{ 
		printf("%d \t",arr[i]);
	}
     
     
        printf (" \nEnter %d elements of the array: \n",size );
        i=0;
	for( i  ; i<size ; i++)
	{
		scanf ("%d", &arr[i] );
	} 
	    
	printf ("The elements of the array are: \n");
	i=0;
	for( i=0;i< size;i++)
	{
		printf ("%d \t", arr[i]);
	}
     
    
    
	printf("\nEnter new size of the array: ");
	scanf("%d",&size);

        int * arr2 = (int*) realloc(arr, size);   	/*size of the previously allocated array changed according to the newly entered size */

        if(arr2==NULL)
        {
    	   perror("realloc() failed\n");
	}
        else
        {
    	arr = arr2;  /* assign new memory to arr */
	}
       
        printf ("The elements of the new array are: \n");
	i=0;
	for( i=0;i< size;i++)
	{
		printf ("%d \t", arr[i]);
	}
	
	printf ("\n");
	
	
	free( arr ); 
	/*deallocating the memory on heap*/ 
	
	return 0;
}
 


************************************************************
************************************************************

/*
   The program takes size of size of input string  from the user, allocates  
   that much memory on heap and stores a string in it
*/ 


#include<stdio.h>
#include<stdlib.h>
  
int main()
{
	int size;
	printf("Enter Maximum size of the sentence you want to enter: ");
	scanf("%d",&size );
	
	getchar(); // to eat \n in input queue
	
	char * sen = ( char *) malloc( sizeof(char) * size );
	if( sen ==  NULL)
		perror ("malloc failed \n");
	
	printf("Enter the String: \n");
	fgets(sen , size , stdin);
	char * q;
	if(  (q=strchr(sen,'\n')) != '\0'  )
	{
	 	*q='\0';
	}
	
	fputs(sen,stdout);
	printf("\n");
 
	free( sen ); 
	/*deallocating the memory on heap*/ 
	
	return 0;
}


************************************************************
************************************************************
/* Growing String on Heap*/ 

#include<stdio.h>
#include<stdlib.h>
  
int main()
{
	 
	char * sen = ( char *) malloc( sizeof(char) * 1 );
	sen[0]='\0';  /*  this will prevent the program from crash, if user press ENTER , without entring any character */
	char ch;
	int size=0;
	printf("Enter String of any length and i will store it:\n");
	
	do
	{
	    ch=	getchar();
	    if(ch=='\n')
	    {
	    	break;
		}
		if(sen[0]=='\0')
		{
			sen = (char*)realloc(sen, 2); 
		}
		else
		{
			sen = (char*)realloc(sen, size+2);
		}
		
		sen[size]=ch;
		size++;
		
		//or  sen[size++]=ch;
		
		
	} while(ch != '\n');
	
	sen[size]='\0';
	printf("%s",sen);
	printf("End\n");
	free(sen);
	
	
	return 0;
}





************************************************************
************************************************************
 /* use of calloc() func to allocate user defined
   datatypes on heap  */

#include<stdio.h>
#include<stdlib.h>
#include<string.h>
 /* use of calloc() func*/
struct Student
{
	int rollNo;
	char name[30];
} s1;

int main()
{
	int size =5;
	printf("%d\n",sizeof(s1)*5);
	struct Student * arrayofStudent = ( struct Student * )calloc( size, sizeof(s1)*size);
	
	if(arrayofStudent == NULL)
	{
		perror("calloc() error");
	}
	int i=0;
	for(i;i<size;i++)   //  initialize data
	{
		arrayofStudent[i].rollNo=i+1;
		strcpy(arrayofStudent[i].name,"Default");
 	}
 	
	i=0;
	for(i;i<size;i++)   // display data
	{
		printf("Roll No: %d  , ",arrayofStudent[i].rollNo);
		printf("name: %s\n",arrayofStudent[i].name);   
	}
	
	free(arrayofStudent);
	
	return 0;
}

************************************************************
************************************************************

// declare and use the 2d int array on heap
//  according to the rows and cols entered by user

#include <stdio.h>
#include <stdlib.h>


int main(int argc, char *argv[]) 

{
	int rows , cols;
	
	printf("enter rows:");
	scanf("%d",&rows);
	
    printf("enter cols:");
	scanf("%d",&cols);
	
	getchar();
	
	int ** table= (int **)malloc(sizeof(int*)*rows);
	int i=0;
	for(i;i<rows;i++)
	{
		table[i]= (int*)malloc( sizeof(int) * cols );
	}
	
	printf("Enter Data for %d elements:\n",rows*cols);
	i=0;
	for(i;i<rows;i++)
	{
		int j=0;
		 for(j;j<cols;j++)
		 {
		 	scanf("%d",&table[i][j]);
		 }
	}
	
	printf("Entered Data \n");
	i=0;
	for(i;i<rows;i++)
	{
		int j=0;
		 for(j;j<cols;j++)
		 {
		 	printf("%d\t",table[i][j]);
		 	
		 }
		 printf("\n");
	}
	
	for(i;i<rows;i++)
	{
		 free(table[i]);
	}
	free(table);
	
	return 0;
}





************************************************************
************************************************************
// declare and use the 2d int array on heap
// according to the rows and cols entered by user
//  make init func for taking input
//  make print func for display data

#include <stdio.h>
#include <stdlib.h>


//void init2(int ** table , int rows, int cols);

void init(int ** table , int rows, int cols);
void print(int ** table , int rows, int cols);
int main(int argc, char *argv[]) 

{
	int rows , cols;
	
	printf("enter rows:");
	scanf("%d",&rows);
	
    printf("enter cols:");
	scanf("%d",&cols);
	
	getchar();  /*  to eat \n from input buffer */
	
	
	/*first allocating the array of pointers
	  equal to the number of rows */
	int ** table= (int **)malloc(sizeof(int*)*rows);
	
	/* allocating the int array equal to the 
	   number of cols for all rows  */
	int i=0;
	for(i;i<rows;i++)
	{
		table[i]= (int*)malloc( sizeof(int) * cols );
	}
	
	init(table,rows,cols); //  func to initialize data
        print(table,rows,cols); //  func to print data
	
	
	for(i;i<rows;i++)     //  free the memory
	{
		 free(table[i]);
	}
	free(table);
	
	return 0;
}


void init(int ** table , int rows, int cols)
{
	printf("Enter Data for %d elements of 2d array:\n",rows*cols);
	int i=0;
	for(i;i<rows;i++)
	{
		int j=0;
		 for(j;j<cols;j++)
		 {
		 	scanf("%d",&table[i][j]);
		 }
	}
//	init2( table ,   rows,   cols);
}


//  checking

// 	void init2(int ** table , int rows, int cols)  //  checking
//	{
//	printf("Entered Data \n");
//	int i=0;
//	for(i;i<rows;i++)
//	{
//		int j=0;
//		 for(j;j<cols;j++)
//		 {
//		 	printf("%d\t",table[i][j]);
//		 	table[i][j]= rows*cols;
//		 }
//		 printf("\n\n");
//	}	
//	}

void print(int ** table , int rows, int cols)
{
	printf("Entered Data \n");
	int i=0;
	for(i;i<rows;i++)
	{
		int j=0;
		 for(j;j<cols;j++)
		 {
		 	printf("%d\t",table[i][j]);
		 	
		 }
		 printf("\n");
	}	
}



************************************************************
************************************************************


#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// program declare 2D character array on heap of fixed size
  
void init(char ** names , int rows, int cols);
void print(char ** names , int rows, int cols);
int main(int argc, char *argv[]) 

{
	int rows , cols;
	
	printf("Enter No. of rows: ");
	scanf("%d",&rows);
	
    	printf("Enter Max lenghth of the name: ");
	scanf("%d",&cols);
	
	getchar();  /*  to eat \n from input buffer */
	
	
	/*first allocating the array of pointers
	  equal to the number of rows */
	//  i am saving char*  in array of length = rows
	char ** names= (char **)malloc(sizeof(char*)*rows);
	
	/* allocating the int array equal to the 
	   number of cols for all rows  */
	int i=0;
	for(i;i<rows;i++)
	{
		names[i]= (char*)malloc( sizeof(char) * cols );
	}
	
	init(names,rows,cols); //  func to initialize data
    print(names,rows,cols); //  func to print data
	
	
	for(i;i<rows;i++)     //  free the memory
	{
		 free(names[i]);
	}
	free(names);
	
	return 0;
}


void init(char** names , int rows, int cols)
{
	printf("Enter %d names: \n",rows );
	char *q;
	int i=0;
	for(i;i<rows;i++)
	{
		fgets(names[i],cols, stdin);
		if((q= strchr(names[i],'\n')) != '\0')
		{
			*q='\0';
		}
	}
}
 

void print(char ** names , int rows, int cols)
{
	printf("\nNames you Entered :\n");
	int i=0;
	for(i;i<rows;i++)
	{
		fputs (names[i], stdout);
		printf("\n");
	}
}



************************************************************
************************************************************
/*
 similar to the prev program 
 but here each element in the array of pointers has its size according to length of the name it is containing 
*/
 

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main(int argc, char *argv[]) 

{
	int rows , cols;
	
	printf("Enter No. of rows: ");
	scanf("%d",&rows);
	 
	getchar();  /*  to eat \n from input buffer */
	
	
	/*first allocating the array of pointers
	  equal to the number of rows */
	//  i am saving char*  in array of length = rows
	char ** names= (char **)malloc(sizeof(char*)*rows);
	
	
	printf("Enter %d names, each on a new line: \n",rows );
 
	int i=0;
	for(i;i<rows;i++)
	{
		names[i]= (char*)malloc( sizeof(char) * 1 );
		names[i][0]='\0';
		char ch;
	    int size=0;
	    
 		do
		{
		    ch=	getchar();
		    if(ch=='\n')
		    {
		    	break;
			}
			if(names[i][0]=='\0')
			{
				names[i] = (char*)realloc(names[i], 2); 
			}
			else
			{
				names[i] = (char*)realloc(names[i], size+2);
			}
			
			names[i][size]=ch;
			size++;
			
			//or  names[size++]=ch;
			
			
		} while(ch != '\n');
		
		names[i][size]='\0';
	}
 
	
	printf("\nNames you Entered :\n");
	  i=0;
	for(i;i<rows;i++)
	{
		fputs (names[i], stdout);
		printf("\n");
	}
	
	
	for(i;i<rows;i++)     //  free the memory
	{
		 free(names[i]);
	}
	free(names);
	
	return 0;
}


 





************************************************************
************************************************************

************************************************************
************************************************************

************************************************************
************************************************************

************************************************************
************************************************************

************************************************************
************************************************************

************************************************************
************************************************************
